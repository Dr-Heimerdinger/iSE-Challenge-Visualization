Generate a complete, production-ready Python script using Streamlit 1.46.0 for the given machine learning task. The script must contain no explanations or comments.

Task Details:
- Task Type: {task_type}
- Task Description: {task_description}

UI Guidelines:
- Follow modern Streamlit layout best practices using `st.columns`, `st.form`, and sidebars.
- Required UI Components:
  {visualize_features}
- Always match input widgets to the data type:
  • Images: `st.file_uploader` + `Image.open()` + `base64` if required
  • Audio: `st.file_uploader` for `.wav`, then convert to float list using `librosa`
  • Text: `st.text_area`, pre-process if needed
  • Video: support preview with sound if possible
  • Tabular/CSV: `st.file_uploader`, load with `pandas.read_csv`
  • Time Series: visualize using `st.line_chart`, `st.altair_chart`

API Integration:
- You must use the following function to call the backend model:
  {api_handler_code}
- Do not directly call requests.post from the UI.
- Validate and preprocess inputs to match the exact schema in the task spec.
- Send only one data item per API call.
- Use `st.spinner()` and handle errors with `st.error()` for UX.

Output Visualization:
- Computer Vision: show original + annotated images side by side
- NLP: render label/score + highlighted text/entities
- Audio: display `st.audio`, emotion label, score, emoji
- Time Series: plot inputs and predictions, use `st.dataframe` for metrics
- General: all scores must be formatted as float, all labels as string

Implementation Constraints:
- Script must start with `import streamlit as st` and include all required libraries.
- Use `st.session_state` to store multi-step results.
- Use `@st.cache_data` to optimize heavy processing.
- Use `main()` function to contain the whole app logic.
- Include `if __name__ == "__main__": main()` at the bottom.
- Ensure the script is runnable and bug-free under unknown test conditions.

Validation Checklist:
- Validate file types and content before use.
- Use `isinstance()` and `try-except` blocks to handle all user input and API response errors.
- Always check for missing or malformed fields in API response before displaying.
- Convert labels to strings and scores to floats before display or use.
