Generate a complete, production-ready Python script for a Gradio (3.50.2) interface without comment, explanation or introduction texts.

1. Core Task:
Type: {task_type}
Description:
{task_description}

2. Port: The final app must run on localhost: {port}.

3. Visualization & Functionality:
Required Features: This section describes the components and behavior of the UI.
{visualize_features}

4. API & Model Details:
API URL: {api_url}
Verified Input Example (for request structure): 
{verified_input}
Verified Output Example (raw from API):
{verified_output}
{post_processing_section}

5. Example Data Context:
Source Path for Examples: {data_path}
Data Description: 
{dataset_description}

6. CRITICAL SYNTAX RULES:
- Never repeat a keyword argument in a function call
- Always check for None/empty before processing lists
- Ensure gr.Dataframe headers match returned data
- Use datatype=['image', 'str', ...] for image columns
- Include timeout=20 in all requests.post() calls
- Implement comprehensive error handling
- Script must be entirely self-contained

7. Critical File Paths:
You MUST use these exact absolute paths when accessing files:
{auxiliary_file_paths}

8. GRADIO VERSION COMPATIBILITY (CRITICAL):
{gradio_warnings}

9. Integration Context (For Reference):
The following context is provided to help you understand the overall task and API requirements:
{context}

Final Instructions:
- Create a function named `create_ui()` that returns a gr.Blocks object
- The function must contain all UI component definitions
- Do NOT include any event handlers or processing logic
- Ensure proper imports (import gradio as gr)
- Components must match the data types described
- Use absolute paths from Critical File Paths section