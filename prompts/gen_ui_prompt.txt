Generate a complete, production-ready Python script for a Gradio (5.34.0) interface without comment, explaination and introduction texts.

1. Core Task:
Type: {task_type}
Description:{task_description}

Port: The final app must run on localhost: {port}.
3. Visualization & Functionality:
Required Features: This section describes the components and behavior of the UI.
{visualize_features}
4. API & Model Details:
API URL: {api_url}
Verified Input Example (for request structure): {verified_input}
Verified Output Example (raw from API):{verified_output}
{post_processing_section}
{guidance_section}
5. Example Data Context:
Source Path for Examples: {data_path}
Data Description: This section describes the actual data format and source. The UI's examples and data loading logic should be based on this.
{dataset_description}
6.CRITICAL SYNTAX RULE: Never repeat a keyword argument in a function call. For example, gr.Image(type='pil', type='pil') is a SyntaxError and is strictly forbidden. Check your generated code for repeated keywords before finalizing.
DATA HANDLING: Always check if a list of files or data is None or empty before starting a loop to avoid errors.
GRADIO COMPONENTS: Make sure the gr.Dataframe component has the correct number of headers matching the data you return. For image columns, use datatype=['image', 'str', ...].
API CALLS: Always include a timeout (e.g., timeout=20) in requests.post() calls. Include comprehensive try...except blocks to handle requests.RequestException and other potential errors gracefully.
SELF-CONTAINED: The entire script must be in a single file, with no external function calls unless the functions are defined within the script itself.
7. Critical File Paths:
This section provides the ABSOLUTE paths to necessary auxiliary files like mappings or data files.
You MUST use these exact absolute paths when opening files in the generated code.
{auxiliary_file_paths}
8. GRADIO VERSION COMPATIBILITY (CRITICAL):
{gradio_warnings}
Final Instructions:
The script must be self-contained in a single file.
It must be robust and include error handling for API calls.
Add comments to explain key parts of the code, especially the API interaction and data processing logic as described in 'API & Model Details'.
Ensure the Gradio components chosen are appropriate for the data types described in the 'Verified Input Example' and 'Example Data Context'.