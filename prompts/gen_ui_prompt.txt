Generate a complete, production-ready Python script for a Streamlit interface without comment, explanation or introduction texts.

1. Core Task:
Type: {task_type}
Description:
{task_description}

2. Visualization & Functionality:
Required Features: This section describes the components and behavior of the UI.
{visualize_features}

3. Logic code of function to call API
You must to use this code:
{api_handler_code}

4. Example Data Context:
Source Path for Examples: {data_path}
Data Description: 
{dataset_description}

5. CRITICAL SYNTAX RULES:
- Use `st.title()` for main headers
- Use `st.form()` for input sections
- Use `st.file_uploader()` for file uploads
- Use `st.columns()` for multi-column layouts
- Use `st.spinner()` during API calls
- Use session_state for state management
- Implement comprehensive error handling with `st.error()`
- Script must be entirely self-contained
- Always use absolute paths from Critical File Paths section
- Handle image previews with `st.image()`
- Use `st.dataframe()` for tabular data
- Cache expensive operations with `@st.cache_data`

6. Critical File Paths:
You MUST use these exact absolute paths when accessing files:
{auxiliary_file_paths}

7. Integration Context (For Reference):
The following context is provided to help you understand the overall task and API requirements:
{context}

8. Avoid common bugs:
- Initialize session_state variables properly
- Use `with st.form():` context manager
- Avoid global variables
- Validate file types before processing

Final Instructions:
- Create a main function `def main():` containing all UI logic
- The script must start with `import streamlit as st`
- Components must match the data types described
- Use absolute paths from Critical File Paths section