Generate a complete, production-ready Python script using Streamlit 1.46.0 for the given machine learning task. The script must contain no explanations or comments.

Task Details:
- Task Type: {task_type}
- Task Description: {task_description}

Critical File Paths:
You MUST use these exact absolute paths when accessing files:
{auxiliary_file_paths}

UI Guidelines:
- Follow modern Streamlit layout best practices using `st.columns`, `st.form`, and sidebars.
- Required UI Components:
  {visualize_features}
- Always match input widgets to the data type:

  
- Code Generation: 
  • Use `st.text_area` for problem description
  • Display generated code in `st.code` block with syntax highlighting
  • Show test results in expandable `st.expander`
- Depth Estimation:
  • Display depth map as heatmap using `plt.imshow` with 'viridis' colormap
  • Use `st.pyplot` to render depth visualization
- Image Segmentation:
  • Convert segmentation mask to color-coded image
  • Show original and segmented images side-by-side
- Keypoint Detection:
  • Draw keypoints on image using `ImageDraw`
  • Connect keypoints with skeleton lines
  • Display confidence scores in tooltips
- Object Detection in Video:
  • Use `st.video` for video preview
  • Process video frame-by-frame with progress bar
  • Display sample annotated frames

API Integration:
- You must use the following function to call the backend model:
  {api_handler_code}
- Do not directly call requests.post from the UI.
- Validate and preprocess inputs to match the exact schema in the task spec.
- Send only one data item per API call.
- Use `st.spinner()` and handle errors with `st.error()` for UX.

Output Visualization:
- ALWAYS import ALL required libraries at the top
- Computer Vision: show original + annotated images side by side. Attention always: from PIL import Image, ImageDraw, ImageFont, ImageOps
- NLP: render label/score + highlighted text/entities
- Audio: display `st.audio`, emotion label, score, emoji
- Time Series: plot inputs and predictions, use `st.dataframe` for metrics
- General: all scores must be formatted as float, all labels as string

# Adding visualization đặc thù:
- Code Generation: 
  • Use `st.code(generated_code, language='python')` 
  • Show test cases in expandable sections with pass/fail status
- Depth Estimation:
  • Normalize depth values before visualization
  • Add colorbar to depth map for scale reference
- Keypoint Detection:
  • Use different colors for different keypoint types
  • Show confidence scores on hover
- Object Detection in Video:
  • Generate annotated video preview
  • Allow frame-by-frame navigation

Implementation Constraints:
- Script must start with `import streamlit as st` and include all required libraries.
- Use `st.session_state` to store multi-step results.
- Use `@st.cache_data` to optimize heavy processing.
- Use `main()` function to contain the whole app logic.
- Include `if __name__ == "__main__": main()` at the bottom.
- Ensure the script is runnable and bug-free under unknown test conditions.

# Unique Constrains:
- Video Processing:
  • Use `tempfile` for video storage
  • Limit video length to 30 seconds for performance
  • Show processing progress with `st.progress`
- Large Images:
  • Resize images > 1024px before processing
  • Use `use_column_width=True` for display

Validation Checklist:
- Validate file types and content before use.
- Use `isinstance()` and `try-except` blocks to handle all user input and API response errors.
- Always check for missing or malformed fields in API response before displaying.
- Convert labels to strings and scores to floats before display or use.

# Additional Check:
- Video Files: Verify supported formats (mp4, avi, mov)
- Keypoint Detection: Validate skeleton connections
- Code Generation: Sanitize user input to prevent code injection
- import necessary libraries like matplotlib, np, librosa, etc

Bug Prevention Checklist:
- Strictly match API payload format: 
  - For single image: {{"data": base64_string}}
  - NOT: {{"data": [base64_string]}}
  - NOT: [{{"data": base64_string}}]
- Validate uploaded file types and ensure correct content types
- Check if response data is a list or nested list before using
- Cast all text-based inputs to string before rendering or processing, e.g., `str(label)`
- Unwrap lists as needed using conditional checks (e.g., `if isinstance(data[0], list): data = data[0]`)
- Ensure proper initialization of `st.session_state` variables
- Always use `st.form()` context properly (`with st.form("form_name"):`)
- Avoid deprecated Streamlit parameters (e.g., replace `use_column_width` with `use_container_width`)
- **TEST payload structure before sending: print(payload) or log it**

Recomment:
- Video Processing:
  • Check frame count before processing
  • Handle variable frame rates
- Keypoint Detection:
  • Normalize coordinates to image dimensions
  • Handle missing keypoints (score < 0.5)
- Depth Estimation:
  • Clip extreme depth values
  • Add min/max depth indicators